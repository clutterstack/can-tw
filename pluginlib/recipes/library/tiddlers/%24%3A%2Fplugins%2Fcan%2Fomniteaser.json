{"title":"$:/plugins/can/omniteaser","description":"Omniteaser - Generate a teaser preview for a tiddler","author":"Chris Nicoll","version":"0.1.0","core-version":">=5.1.22","source":"https://github.com/clutterstack/TW5-omni","list":"readme documentation license","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/plugins/can/omniteaser/macro\": {\n            \"title\": \"$:/plugins/can/omniteaser/macro\",\n            \"tags\": \"tests teaser $:/tags/Macro\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"\\\\define teaser(title, chars:100, maxelements:2)\\n<$wikify name=wik text={{$title$}} output=html>\\n<$macrocall $name=shortenwikified wikifiedtext=<<wik>> chars=$chars$ maxelements=$maxelements$/>\\n</$wikify>\\n\\\\end\"\n        },\n        \"$:/plugins/can/omniteaser/documentation\": {\n            \"title\": \"$:/plugins/can/omniteaser/documentation\",\n            \"caption\": \"documentation\"\n        },\n        \"$:/plugins/can/omniteaser/license\": {\n            \"title\": \"$:/plugins/can/omniteaser/license\",\n            \"caption\": \"license\",\n            \"text\": \"BSD 3-Clause License\\n\\nCopyright (c) 2020, Chris Nicoll\\n\\nAll rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n\\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n\\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\n        },\n        \"$:/plugins/can/omniteaser/macros/regexteaser.js\": {\n            \"title\": \"$:/plugins/can/omniteaser/macros/regexteaser.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/can/omniteaser/macros/regexteaser.js\\ntype: application/javascript\\nmodule-type: macro\\nMacro to take wikified text and return a teaser made from the first chars characters of its first maxelements html elements. Deals with possible nested elements.\\n\\\\*/\\n\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\n/*\\nMacro to take wikified text and return a teaser made from the first chars characters of its first maxelements html elements. Deals with possible nested elements.\\n*/\\n\\nexports.name = \\\"shortenwikified\\\";\\n\\nexports.params = [\\n\\t{name: \\\"wikifiedtext\\\"}, {name: \\\"chars\\\"}, {name: \\\"maxelements\\\", default: 1}\\n];\\n\\nconst openClosePattern = /\\\\<(?<tag>[^\\\\/\\\\>]*)( ?.*?)\\\\>(.*?)\\\\<\\\\/\\\\k<tag>\\\\>/gms;\\nconst emptyTagPairPattern = /\\\\<(?<tag>[^\\\\/\\\\> ]*) ?[^\\\\/\\\\>]*?\\\\>\\\\<\\\\/\\\\k<tag>\\\\>/gm;\\n// const openClosePattern = /\\\\<(?<tag>[^\\\\/ ]*?) .*?\\\\>(.*?)\\\\<\\\\/\\\\k<tag>\\\\>/gms;\\nconst openClosePatternG = /(\\\\<(?<tag>[^\\\\/]*?).*?\\\\>(.*?)\\\\<\\\\/\\\\k<tag>\\\\>)/gm;\\nconst tagsAtEndsPattern = /^\\\\<(?<tag>[^\\\\/]*?).*?\\\\>(.*?)\\\\<\\\\/\\\\k<tag>\\\\>$/m;\\nconst betweenEndTagsPattern = /(?<=\\\\<(?<tag>[^\\\\/]*?).*?\\\\>)(.*?)(?=\\\\<\\\\/\\\\k<tag>\\\\>)/gm; //only gets rid of one outer set of tags\\n\\n/*\\nRun the macro\\n*/\\nexports.run = function(wikifiedtext, chars, maxelements) {\\n    //console.log(\\\"wikifiedtext: \\\", wikifiedtext);\\n    if (wikifiedtext.trim().length == 0) { \\n        return \\\"\\\"; \\n    }\\n    var maxchars = parseFloat(chars);\\n    const firstElementString = getFirstElements(wikifiedtext, maxelements);\\n    //console.log(\\\"check output of getFirstElements:\\\",getFirstElements(wikifiedtext, maxelements) );\\n    const splitArr = splitText(firstElementString);\\n    //console.log(\\\"splitText(firstElementString):\\\", splitText(firstElementString) );\\n    console.log(\\\"splitArr: \\\", splitArr );\\n    var countText = getLastIndex(splitArr, maxchars);\\n    //console.log(\\\"gotLastIndex: \\\", countText);\\n    const lastIndex = countText[1];\\n    const total = countText[0];\\n    if (total > maxchars) {\\n        const zappedArray = countText[2];\\n        //console.log(\\\"zapped: \\\", zappedArray);\\n        //console.log(\\\"lastIndex: \\\", lastIndex);\\n        const outArray = trimLast(zappedArray, lastIndex, total - maxchars);\\n        //console.log(\\\"final array: \\\" , outArray);\\n        var newString = outArray.join(\\\"\\\");\\n        //console.log(\\\"newString: \\\",newString);\\n        return deleteTrailingTags(newString);\\n    } \\n    else if (total == 0){\\n        //console.log(\\\"total text chars was 0\\\");\\n        return \\\"\\\";\\n    } else {\\n       var countedArray = countText[2];\\n       countedArray[lastIndex] = countedArray[lastIndex]+\\\" (...)\\\";\\n       return countedArray.join(\\\"\\\");  \\n    }\\n};\\n\\nfunction getFirstElements(inString, maxelements) {\\n    //console.log(\\\"getFirstElements matches:\\\", inString.match(openClosePattern));\\n    //console.log(\\\"want first \\\", maxelements, \\\" matches.\\\");\\n    var outArray = [];\\n    var match = inString.match(openClosePattern);\\n    if (match !== null) {\\n        for (let i = 0; i < maxelements; i++) {\\n            //console.log(\\\"now adding match at index \\\",i);\\n            if (match[i] !== null) {\\n                outArray.push(match[i]);\\n            }\\n        }\\n    }\\n    //console.log(\\\"getFirstElements: \\\", outArray.join(\\\"\\\"));\\n    return outArray.join(\\\"\\\");\\n};\\n\\nfunction splitText(inStr) {\\n    const rawsplit = inStr.split(/(\\\\<.*?\\\\>)/);\\n    const result = rawsplit; //.filter(word => word.length > 0);\\n    return result;\\n};\\n\\nfunction isTag(inStr) {\\n    //returns true or false\\n    const reg = /^\\\\<.*?\\\\>$/;\\n    return reg.test(inStr); //should test for svg and perhaps other things that have renderable content inside opening tag\\n};\\n\\nfunction getLastIndex(inArray, maxchars) {\\n    var tot = 0;\\n    var index = 0;\\n    var lastIndex = 0;\\n    var outArray = []; //inArray; //WATCH OUT -- ASSIGN BY REFERENCE!!\\n    for (const element of inArray) {\\n        const check = isTag(element);\\n        //console.log(\\\"check \\\", element, \\\" : \\\",check);\\n        if (check == false) {\\n            if (tot > maxchars) {\\n                //console.log(\\\"total maxchars \\\", tot, \\\" has exceeded limit of \\\", maxchars, \\\" at index \\\",index);\\n                outArray[index] = \\\"\\\";\\n            } else {\\n                if (element.trim().length == 0 ) { //only whitespace\\n                    outArray[index] = \\\"\\\";\\n                    lastIndex = index;\\n                } else {\\n                    outArray[index] = element;\\n                    //console.log(\\\"adding \\\", element.length, \\\" chars to total (previously \\\", tot,\\\") at index \\\", index);\\n                    lastIndex = index;\\n                    tot += element.length;\\n                }\\n            }\\n        } else if (element == \\\"<br>\\\") {\\n            if (tot > maxchars) {\\n            //console.log(\\\"found a <br> after the last needed text\\\");\\n            outArray[index] = \\\"\\\";\\n            } else {\\n                outArray[index] = element;\\n            }\\n        }\\n        index += 1;\\n    }\\n    //console.log(\\\"tot: \\\", tot, \\\"; maxchars: \\\", maxchars);\\n    return [tot, lastIndex, outArray];\\n};\\n\\nfunction trimLast(inArray, index, diff) {\\n    var outArray = inArray; //This assignment by reference, deliberately. Pass in something that can be changed.\\n    var lastEl = outArray[index];\\n    //console.log(\\\"diff: \\\", diff);\\n    //console.log(\\\"last text element is \\\", lastEl);\\n    var lastElTrim = lastEl.substring(0,lastEl.length - diff ) + \\\" (...)\\\";\\n    //console.log(\\\"trimming element to length \\\", lastElTrim.length,\\\" from \\\", lastEl.length);\\n    //console.log(\\\"last text element is now \\\", lastElTrim);\\n    outArray[index] = lastElTrim;\\n    return outArray;\\n};\\n\\nfunction deleteTrailingTags(inString) {\\n    // Delete empty tag pairs until none remain\\n    const reg = emptyTagPairPattern;\\n    var reduced = inString;\\n    if (reg.test(reduced) == true) {\\n        //console.log(\\\"test is true: reduced is \\\", reduced);\\n        reduced = reduced.replace(reg,\\\"\\\");\\n        reduced = deleteTrailingTags(reduced);\\n    } else if (reg.test(reduced) == false) {\\n        //console.log(\\\"test is false: reduced is \\\", reduced);\\n    }\\n    return reduced;\\n    };\\n\\n})();\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"macro\",\n            \"creator\": \"chris\",\n            \"tags\": \"teaser $:/tags/Macro\"\n        }\n    }\n}"}